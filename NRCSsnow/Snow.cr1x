'CR1000x Series Datalogger



'Comments and Notes
' All sensor heights are set in inches
' Set forceRead = 1 to force a set of snow depth readings
' Set luftCalib = 1 to perform the luft calibration...this will set the sensor to read snow depth based on target assuming currently no snow.


'Sommer Wiring
' Pink  - C7
' Red   - C8
' Black - G
' Brown - 12v
'
'luft Wiring
' Brown  - SW12_2
' White  - G
' Yellow - C1

'LM20 Wiring
' Red    - 5v
' Black  - G
' Yellow - C6
' White  - C5

'Judd Sensor Wiring
' Green - SW12_1
' Red   - 12V
' Brown - SE1
' White - SE2

'LaserTech S200 Wiring
' Pink  - SW12_1
' Black - GND
' Brown - C3
' Blue  - C4



'Constants
Const LM20port = comC5
Const Laserport = comC3 
Const SommerPort = ComC7
Const logInterval = 60

'Public variables
Public numGood,makeRead,forceRead,progInit
Public PTemp, batt_volt
Public raw As String * 100

'Variables for LaserTech S200
Public distance_f,distance_s,distance_l,i
Public yTilt,angle
Public s200SnowDepth

'Variables for Judd Sensor
Public juddSnowDepth,juddDistance

'Variables for LM20
Public lm20Distance,lm20SnowDepth
Public lm20Split(2) As String * 10

'Variables for Luft
Public luftTemp As String * 100
Public luftSplit(5) As String * 10
Public luftSnowDepth,luftDistance,luftAngle,luftCalib

'Variables for leddarOne
Public readLeddarOne

'Variables for Sommer
Public sommerDistance,sommerSnowDepth

'Variable for setup table
Const numSetupVars = 10
Public setupVars(numSetupVars)
Alias setupVars(1)=s200Height
Alias setupVars(2)=juddHeight
Alias setupVars(3)=lm20Height
Alias setupVars(4)=sommerHeight
Alias setupVars(5)=ledderOneHeight
Alias setupVars(6)=ledderVueHeight

Public SplitResult(7) As String * 10
Public leddar_one(10)      'Array for leddar_one returned data
Public sommerraw(50)



'Define Data Tables
DataTable (laserS200,1,-1)
  'DataInterval (0,60,Min,10)
  Minimum (1,batt_volt,FP2,0,False)
  Sample (1,PTemp,FP2)
  Sample (1,distance_f*12,FP2)
  Sample (1,distance_s*12,FP2)
  Sample (1,distance_l*12,FP2)
  Sample (1,angle,FP2)
  Sample (1,s200SnowDepth,FP2)
EndTable



DataTable(Setup,1,1)
  'Save Setup Variables here
  'DataInterval(5,5,Min,1)
  Sample(numSetupVars,setupVars(1),FP2)
EndTable







'Main Program
BeginProg
  progInit = 0
  If progInit < 1 Then
    progInit = 1
    GetRecord(setupVars,Setup,1)
    If Round(s200Height,0) = NAN Then 'table of setup vals is NANs
      s200Height = 100
      juddHeight = 100
      lm20Height = 100
      sommerHeight = 100
      ledderOneHeight = 100
      ledderVueHeight = 100
    EndIf
    CallTable(setup)
  EndIf


  ';PortsConfig (&B00010000,&B11111111)
  SerialOpen (Laserport,19200,0,0,200,1)
  SerialOpen (LM20port,115200,16,0,50,2)
  SerialOpen (Sommerport,9600,0,0,50,0)
  
  'Turn on Switched 12v ports...need to optimize in the future
  SW12 (SW12_1,1 )
  SW12 (SW12_2,1 )
  

  Scan (1,min,0,0)
    
    If luftCalib = 1 Then
      SDI12Recorder (lufttemp,C1,0,"XARV!",1.0,0,,2)
      luftCalib = 0
    EndIf
      
    'Set forceRead to 1 to force a set of measurements  
    If forceRead = 1 Then
      makeRead = 1
    EndIf

    If TimeIntoInterval(0,logInterval,min) Then
      makeRead = 1
      forceRead = 0
    EndIf

    'save setup every five minutes
    If IfTime(1,5,Min) Then
      CallTable(Setup)
    EndIf

    If makeRead = 1 Then

      PanelTemp (PTemp,250)
      Battery (batt_volt)
      
     'Read LM20 Sensor
      SerialFlush(LM20port)
      SerialOut(LM20port,"?ldl"+CHR(13)+CHR(10),"",0,0)
      SerialIn (raw,LM20port,100,10,100)
      SplitStr (lm20Split(1),raw,":",2,7)
      lm20Distance = lm20Split(2)
      lm20SnowDepth = lm20Height - (lm20Distance*39.3701)


     'Read Judd Sensor
      Delay(0,2600,mSec)
      VoltDiff(juddDistance,1,mv5000,1,0,0,250,-0.19685,0)
      juddSnowDepth = juddHeight + juddDistance

     'ModbusMaster (readLeddarOne,Leddarport,19200,1,1,leddar_one,20,10,3,100)

     'Read luft Sensor
      SDI12Recorder (lufttemp,C1,0,"M!",1.0,0)
      Delay(0,1,Sec)
      SplitStr (luftsplit,lufttemp,"+",5,7)
      luftSnowDepth = luftSplit(3) 
      Delay(0,1,Sec)
      SDI12Recorder (lufttemp,C1,0,"D1!",1.0,0,,2)
      SplitStr (luftsplit,lufttemp,"+",5,7)
      luftAngle = luftsplit(4)
      Delay(0,1,Sec)
      SDI12Recorder (lufttemp,C1,0,"M2!",1.0,0)
      Delay(0,1,Sec)
      SDI12Recorder (lufttemp,C1,0,"D1!",1.0,0,,2)
      SplitStr (luftsplit,lufttemp,"+",5,7)
      luftDistance = luftSplit(2)
      
     'Read Sommer Sensor
      SerialFlush(SommerPort)
      SerialOut(SommerPort,":00;","",0,0)
      SerialIn (raw,SommerPort,100,10,100)
      SplitStr (SplitResult(1),raw," ",2,7)
      sommerDistance = SplitResult(1)
      sommerSnowDepth = sommerHeight - (sommerDistance*0.0393701)
      
      delay(0,5,sec)
       
     'Read Laser Tech Sensor
      SerialFlush(Laserport)
      SerialOut(Laserport,"$DM,7"+CHR(13)+CHR(10),"",0,0)
      'DM4 - Last
      'DM2 - First
      'DM3 - Strongest
      'DM7 - First,strongest,last
      Delay(0,1,2)
      SerialOut(Laserport,"$LS,2"+CHR(13)+CHR(10),"",0,0)
      'LS0 - Do not report weaker
      'LS1 - Report weaker if no strong
      'LS2 - Always report weaker
      Delay(0,1,2)
      SerialOut(Laserport,"$MM,0"+CHR(13)+CHR(10),"",0,0)
      'MM0 - Standard Range
      'MM1 - Extended Range
      'MM2 - Itelligent Range
      Delay(0,1,2)

     'TAKE FIRST SET OF MEASUREMENTS
      SerialOut(Laserport,"$GO,5"+CHR(13)+CHR(10),"",0,0)
     'Delay(0,1,2)
      SerialIn (raw,Laserport,100,10,100)
      SerialIn (raw,Laserport,100,10,100)
        'example laser output  "$DM,L,6.40,F,0,4-1072*9E16"
        SerialIn (raw,Laserport,100,10,100)
        SplitStr (SplitResult(1),raw,",",7,7)
        If SplitResult(1) = "$DM" Then
          distance_f = SplitResult(3)
          distance_s = SplitResult(4)
          distance_l = SplitResult(5)
          numGood = numGood + 1
        Else
          distance_f = 9999
          distance_s = 9999
          distance_l = 9999
        EndIf
        
      CallTable laserS200
      makeRead = 0
    EndIf

  NextScan


EndProg

