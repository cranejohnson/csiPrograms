'CR1000 Series Datalogger

'Program Name: CR1000_ESR9_ACB_2013_04_05.CR1

'Modification Of:  CR1000_ESR9_ACB_2013_04_05.CR1
'Modified By: Crane Johnson
'Date Modified: 24 October 2016
'Modifications: Iridium Hourly Table
'Modifications: Iridium telemetry subroutines and incorporated into main program
'Modifications:
'Git Repository: https://github.com/cranejohnson/SusitnaPrograms
'                Initial commit was the probam as-delivered by DGGS
'Date Loaded:

'Modification Of:  Susitna_Network_Repeater_1_Program_2012.05.28.CR1
'Modified By: A. Cody Beedlow, Geophysical Institute, University of Alaska Fairbanks
'Date Modified: 14 April 2013
'Modifications: Changed station name, added a 107-L AIR TEMPERATURE SENSOR
'Date Loaded:

'Modification Of:  Susitna_Network_Repeater_1_Program_2012.05.28.CR1
'Modified By: Paetzold
'Date Modified: 18 June 2012
'Modifications: Changed station name, added PakBus ID and Station ID
'Date Loaded:

'Original Program:  Susitna_Network_Repeater_1_Program_2012.05.28.CR1
'Written By: R.F. Paetzold
'Date Written: 07 May 2012
'Date Loaded: Not Loaded

'Station Notes:
'       PakBus ID for Statino: 90               'INSERT PakBus ID HERE <==========
'       Station ID:    90                       'INSERT Station ID HERE <==========
'       Time is set to AK Standard Time


'''''''''''''''''''''''''''''''''''
'''' INDIVIDUAL STATION INPUTS ''''
'''''''''''''''''''''''''''''''''''

'INSERT Station Name HERE:
StationName (ESR9)                     'INSERT Station Name HERE <========================

'INSERT Station ID HERE:
Const ID = 90                          'INSERT Station ID HERE <==========================

'DECLARE PUBLIC VARIABLES
Public StationID ' Station ID number, USER INPUT
Public LoggerTemp_C
Public T107_TEMP_C

Public CH200_M0(9)  'Array to hold all data from CH200

Alias CH200_M0(1)=BattVolts_V       'Battery voltage: VDC
Alias CH200_M0(2)=BattCrnt_A        'Current going into, or out of, the battery: Amps
Alias CH200_M0(3)=LoadCrnt_A        'Current going to the load: Amps
Alias CH200_M0(4)=SolarPanel_V      'Voltage coming into the charger: VDC
Alias CH200_M0(5)=SolarPanel_A      'Current coming into the charger: Amps
Alias CH200_M0(6)=Chgr_Tmp_C         'Charger temperature: Celsius
Alias CH200_M0(7)=Chgr_State        'Charging state: 2=Cycle, 3=Float, 1=Current Limited, or 0=None
Alias CH200_M0(8)=Chgr_Source       'Charging source: 0=None, 1=Solar, or 2=AC
Alias CH200_M0(9)=Ck_Batt           'Check battery error: 0=normal, 1=check battery

'Iridium Variables
Public tries                                   ' Counter that keeps track of the number of attempts to send data (zero'd out each hour)
Public success                                 ' The variable is true when the modem is successful
Const Iridiumport = com4                       ' This is the serail port that the iridium modem is connected to
Const Iridiumpowerport = 6                     ' This is the port that turns the modem off and on 9=sw12
Const numvals = 3                              'Number of value to pull out of the Iridium Table
Const sendInterval = 60                        'How often to try and resend iridium data (minutes)
Public forceMessage                            ' Set this variable to 1 in the field to force an iridium message


'Hourly Diagonostics Table
DataTable (HourlyDiag,1,-1)
  DataInterval (0,60,Min,0)
  Sample (1,StationID,fp2)

  'BATTERY VOLTS (V)
  Sample (1,CH200_M0(1),FP2)
  Average (1,CH200_M0(1),FP2,False)
  Maximum (1,CH200_M0(1),FP2,False,False)
  Minimum (1,CH200_M0(1),FP2,False,False)

  'BATTERY CURRENT (A)
  Sample (1,CH200_M0(2),FP2)
  Average (1,CH200_M0(2),FP2,False)
  Maximum (1,CH200_M0(2),FP2,False,False)
  Minimum (1,CH200_M0(2),FP2,False,False)

  'LOAD CURRENT (A)
  Sample (1,CH200_M0(3),FP2)
  Average (1,CH200_M0(3),FP2,False)
  Maximum (1,CH200_M0(3),FP2,False,False)
  Minimum (1,CH200_M0(3),FP2,False,False)

  'SOLAR PANEL VOLTS (V)
  Sample (1,CH200_M0(4),FP2)
  Average (1,CH200_M0(4),FP2,False)
  Maximum (1,CH200_M0(4),FP2,False,False)
  Minimum (1,CH200_M0(4),FP2,False,False)

  'SOLAR PANEL CURRENT (A)
  Sample (1,CH200_M0(5),FP2)
  Average (1,CH200_M0(5),FP2,False)
  Maximum (1,CH200_M0(5),FP2,False,False)
  Minimum (1,CH200_M0(5),FP2,False,False)

  Average (1,LoggerTemp_C,FP2,False)     'Logger Temperature (deg C)
  Average (1,CH200_M0(6),FP2,False)      'Charge Regulator Temperature (deg C)
EndTable

'Hourly Meteorological Measurements Table
DataTable (Hourly,1,-1)
  DataInterval (0,60,Min,0)
  Sample (1,StationID,fp2)

  Sample (1,T107_TEMP_C,FP2)
  Average (1,T107_TEMP_C,FP2,False)
  Maximum (1,T107_TEMP_C,FP2,False,False)
  Minimum (1,T107_TEMP_C,FP2,False,False)
EndTable

'Half Hourly Climate Table (for Current Conditions Table on Web)
DataTable (halfHrlyClimate,1,-1)
  DataInterval (0,30,Min,0)
  Sample (1,StationID,fp2)

  Sample (1,T107_TEMP_C,FP2)
EndTable

'Daily Output Table
DataTable (Daily,1,-1)
  DataInterval(0,1440,Min,0)
  Sample (1,StationID,fp2)

  Average (1,T107_TEMP_C,FP2,False)
  Maximum (1,T107_TEMP_C,FP2,False,False)
  Minimum (1,T107_TEMP_C,FP2,False,False)
EndTable


'Hourly Iridium Table
DataTable (IridiumHourly,1,240)
  DataInterval (0,60,Min,0)
  Sample (1,CH200_M0(1),FP2)
  Sample (1,T107_TEMP_C,FP2)
  Sample (1,tries,FP2)
EndTable

''''''''''''''''''''''
'''' IRIDIUM SUB  ''''
''''''''''''''''''''''

'This subroutine converts a number to a positive integer for transfer by iridium
'i.e.  12.14 becomes  2121  (add 200 then multiply by 10)
Sub converttolong (floatval As Float, longval As Long)
  longval = FIX((floatval+200)*10)
EndSub

'This subroutine converts from Celcius to Fahrenhiet temperature
Sub converttof(temp As Float)
  temp = temp*(9/5)+32
EndSub


Sub senddatatoiridium(numberofvalues,attempts,success)
  Dim result(6)

  Dim message As String * 150
  Dim meslength
  Public localattempts
  Dim lastrecord(100)
  Dim longrecord(100) As Long
  Dim byte1 As Long
  Dim byte2 As Long
  Dim hours As Long
  Dim offset1
  Dim iridchecksum As Long
  Public debug1 As String * 30
  Public debug2 As String * 30
  Public debug3 As String * 30
  Public debug4 As String * 30
  Public debug5 As String * 30

  Dim binaryok As String * 20
  Dim modemready As Long
  Dim online As Long
  Dim messageok As String * 20
  Public messageresult As String * 50
  Public numresult(2) As String * 50
  Dim j

  'Initialize iridium Variables
  offset1 = 0
  iridchecksum = 0
  message = ""
  success = 0
  localattempts = 0


  '###
  '### Get the last data record
  '###

  GetRecord(lastrecord,IridiumHourly,1)

  '###
  '###Get the hours since beginning of the year and insert into binary message
  '### Start calculating binary checksum value
  '###
  hours = INT((IridiumHourly.Timestamp(2,1))/3600)+24
  MoveBytes (message,offset1,hours,2,2)
  MoveBytes (byte1,3,hours,2,1)
  MoveBytes (byte2,3,hours,3,1)
  iridchecksum = iridchecksum + byte1+byte2
  offset1 = offset1 + 2

  '###
  '###Get the specified number of values from the last record and insert them into the binary message
  '###
  For j=1 To numberofvalues Step 1
    converttolong(lastrecord(j),longrecord(j))
    MoveBytes (message,offset1,longrecord(j),2,2)
    MoveBytes (byte1,3,longrecord(j),2,1)
    MoveBytes (byte2,3,longrecord(j),3,1)
    iridchecksum = iridchecksum + byte1+byte2
    offset1 = offset1 + 2
  Next j



  '###
  '### Add checksum to binary message
  '###
  meslength = numberofvalues*2+2
  MoveBytes (message,offset1,iridchecksum,2,2)
  offset1 = offset1 + 2

  '###
  '### Turn on modem and complete SBD session
  '###
  PortSet (Iridiumpowerport,1)
  Delay (1,3,Sec)
  SerialOpen (Iridiumport,19200,3,0,200)
  While ((success <> 1) AND (localattempts < 4))
    debug1 = ""
    debug2 = ""
    debug3 = ""
    debug4 = ""
    debug5 = ""
    SerialFlush (Iridiumport)
    messageresult = "-"
    binaryok = 0
    numresult(1) = 0
    numresult(2) = 0
    online = 0
    modemready = 0
    result() = 0
    attempts = attempts + 1
    localattempts = localattempts + 1
    modemready = SerialOut(Iridiumport, "AT+SBDWB=" + meslength+CHR(13),"READY",1,300)
    If (modemready<>0) Then
      debug1 = "Modem Ready"
      SerialOutBlock(Iridiumport,message,offset1)
      SerialIn (binaryok,Iridiumport,100,"0",5)
      If (InStr (1,binaryok,"0",2)) Then
        debug2 = "Modem Accepts Data"
        debug3 = "Waiting for Satellite"
        online = SerialOut (Iridiumport,"AT+CIER=1,0,1,0"+CHR(13),"+CIEV:1,1",1,1000)                            'Set modem config and wait for satellite connection
        If (online <> 0) Then
          debug3 = "Satellite Visible"
          debug4 = "Message Sent"
          SerialOut(Iridiumport,"AT+SBDIX"+CHR(13),"",0,0)
          SerialIn(messageresult,Iridiumport,4000,0,30)
          SplitStr(numresult,messageresult,":",2,5)
          SplitStr(result,numresult(2),",",6,5)
          If (result(1) < 5) Then
            debug5 = "Delivery confirmed by Satellite"
            debug1 = "-"
            debug2 = "-"
            success = 1
          Else
            debug4 = "Message Failed"
            debug3 = "-"
          EndIf
        Else
          debug3 = "No satellite Connection"
        EndIf
      Else
        debug2 = "Data not accepted by modem"
      EndIf
    Else
      debug1 = "Modem Not Ready"
    EndIf

  Wend
  If (success = 0) Then
    debug5 = "Message Not Delivered"
    debug1 = "-"
    debug2 = "-"
    
    
  EndIf
  SerialOut(Iridiumport,"AT+SBDD0"+CHR(13),"",0,100)
  SerialFlush (Iridiumport)
  SerialClose(Iridiumport)
  PortSet(Iridiumpowerport,0)

EndSub


''''''''''''''''''''''
'''' MAIN PROGRAM ''''
''''''''''''''''''''''

'SCAN (EXECUTE) PROGRAM AT 60-SEC INTERVALS
BeginProg
  Scan (60,Sec,0,0)

    ''''' Set Station ID '''''
    StationID = ID


    '''''''''''''''''''
    '   Diagnostics   '
    '''''''''''''''''''
    'MEASURE DATALOGGER WIRING PANEL TEMPERATURE (deg C)
    PanelTemp (LoggerTemp_C,250)

    'CH200 CHARGE REGULATOR MEASUREMENTS
    SDI12Recorder (CH200_M0(),1,0,"MC!",1.0,0)

    ''''''''''''''
    '      AT    '
    ''''''''''''''

    ''''''''''  READ 107-L AIR TEMPERATURE SENSOR  ''''''''''
    Therm107(T107_TEMP_C,1,1,Vx1,0,_60Hz,1.0,0.0)  'Single Ended Channel 1 (SE1)
    'Excitation Channel 1 (VX1)


    CallTable HourlyDiag
    CallTable Hourly
    CallTable halfHrlyClimate
    CallTable Daily
    CallTable IridiumHourly

  NextScan

  SlowSequence
  Scan (1,min,0,0)
    If forceMessage = 1 Then
      Call senddatatoiridium(numvals,tries,success)
      forceMessage = 0
    EndIf
    If TimeIntoInterval(1,sendInterval,min) Then
      tries = 0
      Call senddatatoiridium(numvals,tries,success)
    EndIf
    If TimeIntoInterval(3,5,min) Then
      If (success = 0) Then
        Call senddatatoiridium(numvals,tries,success)
      EndIf
    EndIf
  NextScan

EndProg
