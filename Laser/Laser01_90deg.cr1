'CR1000 Series Datalogger
'To create a different opening program template, type in new
'instructions and select Template | Save as Default Template
'date:
'program author:

' CR1000 is wired to iridium modem as follows (modem configured for 3-wire communications)
' C3 - Iridium yellow wire
' C4 - Iridium grey wire
' C5 - Iridium control wire (power on/off)  
' 12 - Iridium red power toggle wire
' The iridium modem is conected directly to power source Red - 12v and Black - G
'
' G-NSDOG2-002 Inclinomter (measures +-45 degrees)
'     Note: Should use G-NSDOG02-003 it is +-90 degrees)
' Sensor Wiring (Original)
' White (Pin 1) - VCC 8-30 volt
' Yellow (Pin 2) - Ground
' Brown (Pin 3) - Output X 0-4.5 volts
' Green (Pin 4) - Output Y parallel to the cable 0-4.5 volts 
'  
' Spliced cable
' SW12v - Red wire
' G     - Black wire
' SE1   - White wire  (y axis measurement)

'S200 Laser Technologies Wiring
'S200 configured with default settings
' SW12v - Pink
' G     - Black
' C1    - Blue
' C2    - Grey
' G     - Shield

'Declare Public Variables
'Example:
Public numGood,makeRead,forceRead,forceMessage
Public PTemp, batt_volt,distance_f,distance_s,distance_l,i
'Public InString As String * 100
Public yTilt,angle
Public raw As String * 100
'Public temp As String * 100
Public SplitResult(7) As String * 10
Public rawDist_f(50)
Public rawDist_s(50)
Public rawDist_l(50)






'iridium Variables
Public tries                                   ' Counter that keeps track of the number of attempts to send data (zero'd out each hour)
Public success                                 ' The variable is true when the modem is successful
Const Iridiumport = com2                   ' This is the serail port that the iridium modem is connected to
Const numvals = 7
Const sendInterval = 60

Const Laserport = com1


'Define Data Tables
DataTable (hourtab,1,-1)
  'DataInterval (0,60,Min,10)
  Minimum (1,batt_volt,FP2,0,False)
  Sample (1,PTemp,FP2)
  Sample (1,distance_f,FP2)
  Sample (1,distance_s,FP2)
  Sample (1,distance_l,FP2)
  Sample (1,angle,FP2)
  Sample (1,tries,FP2)
EndTable


DataTable (rawMeasure_f,1,-1)
  'DataInterval (0,60,Min,10)
  Sample (50,rawDist_f,FP2)
EndTable

DataTable (rawMeasure_s,1,-1)
  'DataInterval (0,60,Min,10)
  Sample (50,rawDist_s,FP2)
  Sample (1,SplitResult(7),String)
EndTable
DataTable (rawMeasure_l,1,-1)
  'DataInterval (0,60,Min,10)
  Sample (50,rawDist_l,FP2)
EndTable



'This subroutine converts a number to a positive integer for transfer by iridium
'i.e.  12.14 becomes  2121  (add 200 then multiply by 10)
Sub converttolong (floatval As Float, longval As Long)
  longval = FIX((floatval+200)*10)
EndSub

Sub senddatatoiridium(numberofvalues,attempts,success)
  Dim result(6)

  Dim message As String * 150
  Dim meslength
  Public localattempts
  Dim lastrecord(100)
  Dim longrecord(100) As Long
  Dim byte1 As Long
  Dim byte2 As Long
  Dim hours As Long
  Dim offset1
  Dim iridchecksum As Long
  Public debug1 As String * 30
  Public debug2 As String * 30
  Public debug3 As String * 30
  Public debug4 As String * 30
  Public debug5 As String * 30

  Dim binaryok As String * 20
  Dim modemready As Long
  Dim online As Long
  Public messageresult As String * 50
  Public numresult(2) As String * 50
  Dim j

  'Initialize iridium Variables
  offset1 = 0
  iridchecksum = 0
  message = ""
  success = 0
  localattempts = 0


  '###
  '### Get the last data record
  '###

  GetRecord(lastrecord,hourtab,1)

  '###
  '###Get the hours since beginning of the year and insert into binary message
  '### Start calculating binary checksum value
  '###
  hours = INT((hourtab.Timestamp(2,1))/3600)+24
  MoveBytes (message,offset1,hours,2,2)
  MoveBytes (byte1,3,hours,2,1)
  MoveBytes (byte2,3,hours,3,1)
  iridchecksum = iridchecksum + byte1+byte2
  offset1 = offset1 + 2

  '###
  '###Get the specified number of values from the last record and insert them into the binary message
  '###
  For j=1 To numberofvalues Step 1
    converttolong(lastrecord(j),longrecord(j))
    MoveBytes (message,offset1,longrecord(j),2,2)
    MoveBytes (byte1,3,longrecord(j),2,1)
    MoveBytes (byte2,3,longrecord(j),3,1)
    iridchecksum = iridchecksum + byte1+byte2
    offset1 = offset1 + 2
  Next j



  '###
  '### Add checksum to binary message
  '###
  meslength = numberofvalues*2+2
  MoveBytes (message,offset1,iridchecksum,2,2)
  offset1 = offset1 + 2

  '###
  '### Turn on modem and complete SBD session
  '###
  PortSet(5,1 )
  Delay (1,3,Sec)
  SerialOpen (Iridiumport,19200,3,0,200)
  While ((success <> 1) AND (localattempts < 4))
    debug1 = ""
    debug2 = ""
    debug3 = ""
    debug4 = ""
    debug5 = ""
    SerialFlush (Iridiumport)
    messageresult = "-"
    binaryok = 0
    numresult(1) = 0
    numresult(2) = 0
    online = 0
    modemready = 0
    result() = 0
    attempts = attempts + 1
    localattempts = localattempts + 1
    modemready = SerialOut(Iridiumport, "AT+SBDWB=" + meslength+CHR(13),"READY",1,300)
    If (modemready<>0) Then
      debug1 = "Modem Ready"
      SerialOutBlock(Iridiumport,message,offset1)
      SerialIn (binaryok,Iridiumport,100,"0",5)
      If (InStr (1,binaryok,"0",2)) Then
        debug2 = "Modem Accepts Data"
        debug3 = "Waiting for Satellite"
        online = SerialOut (Iridiumport,"AT+CIER=1,0,1,0"+CHR(13),"+CIEV:1,1",1,1000)                            'Set modem config and wait for satellite connection
        If (online <> 0) Then
          debug3 = "Satellite Visible"
          debug4 = "Message Sent"
          SerialOut(Iridiumport,"AT+SBDIX"+CHR(13),"",0,0)
          SerialIn(messageresult,Iridiumport,4000,0,30)
          SplitStr(numresult,messageresult,":",2,5)
          SplitStr(result,numresult(2),",",6,5)
          If (result(1) < 5) Then
            debug5 = "Delivery confirmed by Satellite"
            success = 1
          Else
            debug4 = "Message Failed"
          EndIf
        Else
          debug3 = "No satellite Connection"
        EndIf
      Else
        debug2 = "Data not accepted by modem"
      EndIf
    Else
      debug1 = "Modem Not Ready"
    EndIf

  Wend
  If (success = 0) Then
    debug5 = "Message Not Delivered"
  EndIf
  SerialOut(Iridiumport,"AT+SBDD0"+CHR(13),"",0,100)
  SerialFlush (Iridiumport)
  SerialClose(Iridiumport)
  PortSet(5,0)    
EndSub






'Main Program
BeginProg
  success = 0
  'PortsConfig (&B00010000,&B11111111)
  SerialOpen (Laserport,115200,0,0,200)
  SerialOpen (Iridiumport,19200,3,0,200)


  Scan (1,min,0,0)
    If forceRead = 1 Then
      makeRead = 1
    EndIf
    If TimeIntoInterval(0,sendInterval,min) Then
      makeRead = 1
    EndIf


    If TimeIntoInterval(0,sendInterval,min) Then
      forceRead = 0
    EndIf

    If makeRead = 1 Then
      PanelTemp (PTemp,250)
      Battery (batt_volt)
      numGood = 0
      SW12(1)
      Delay(0,5,sec)
      VoltSe (yTilt,1,mV5000,1,1,0,250,1.0,0)
      'Measures the angle between horizontal down to laser
      angle = (((yTilt-500)/4000)*180)-90
      SerialFlush(Laserport)
      SerialOut(Laserport,"$DM,7"+CHR(13)+CHR(10),"",0,0)
      'DM4 - Last
      'DM2 - First
      'DM3 - Strongest
      'DM7 - First,strongest,last
      Delay(0,1,2)
      SerialOut(Laserport,"$LS,2"+CHR(13)+CHR(10),"",0,0)
      'LS0 - Do not report weaker
      'LS1 - Report weaker if no strong
      'LS2 - Always report weaker
      Delay(0,1,2)
      SerialOut(Laserport,"$MM,0"+CHR(13)+CHR(10),"",0,0)
      'MM0 - Standard Range
      'MM1 - Extended Range
      'MM2 - Itelligent Range
      Delay(0,1,2)

      'TAKE FIRST SET OF MEASUREMENTS
      SerialOut(Laserport,"$GO,60"+CHR(13)+CHR(10),"",0,0)
      'Delay(0,1,2)
      SerialIn (raw,Laserport,100,10,100)
      SerialIn (raw,Laserport,100,10,100)
      For i = 1 To 50 Step 1
        'example laser output  "$DM,L,6.40,F,0,4-1072*9E16"
        SerialIn (raw,Laserport,100,10,100)
        SplitStr (SplitResult(1),raw,",",7,7)
        If SplitResult(1) = "$DM" Then
          rawDist_f(i) = SplitResult(3)
          rawDist_s(i) = SplitResult(4)
          rawDist_l(i) = SplitResult(5)
          numGood = numGood + 1
        Else
          rawDist_f(i) = 9999
          rawDist_s(i) = 9999
          rawDist_l(i) = 9999
        EndIf

      Next

      SortSpa (rawDist_f,50,rawDist_f)
      SortSpa (rawDist_s,50,rawDist_s)
      SortSpa (rawDist_l,50,rawDist_l)
      distance_f = 100*rawDist_f(INT(numGood/2))
      distance_s = 100*rawDist_s(INT(numGood/2))
      distance_l = 100*rawDist_l(INT(numGood/2))
      CallTable rawMeasure_f
      CallTable rawMeasure_s
      CallTable rawMeasure_l
      CallTable hourtab
      makeRead = 0
      SW12(0)
    EndIf
  NextScan


  SlowSequence
  Scan (1,min,0,0)
    debug1 = ""
    debug2 = ""
    debug3 = ""
    debug4 = ""
    If forceMessage = 1 Then
      Call senddatatoiridium(numvals,tries,success)
      forceMessage = 0
    EndIf
    If TimeIntoInterval(1,sendInterval,min) Then
      tries = 0
      Call senddatatoiridium(numvals,tries,success)
    EndIf
    If TimeIntoInterval(3,5,min) Then
      If (success = 0) Then
        Call senddatatoiridium(numvals,tries,success)
      EndIf
    EndIf
  NextScan
EndProg

